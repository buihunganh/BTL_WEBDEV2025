@model List<ShoppingCartItem>
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container-fluid px-4 my-4">
    <h1 class="fw-bold mb-4">Shopping Cart</h1>

    @if ((ViewBag.RequireLogin ?? false) == true)
    {
        <div class="d-flex justify-content-center">
            <div class="shadow-sm border-0 rounded-4 p-4" style="max-width:640px; width:100%; background: linear-gradient(180deg,#ffffff 0%, #f8f9fa 100%);">
                <div class="text-center">
                    <div class="d-inline-flex align-items-center justify-content-center rounded-circle mb-3" style="width:56px; height:56px; background:#000; color:#fff;">
                        <i class="bi bi-lock-fill fs-5"></i>
                    </div>
                    <h2 class="fw-semibold mb-2" style="font-size:22px;">Please sign in to shop</h2>
                    <p class="text-muted mb-4">Sign in to view your cart and proceed to checkout.</p>
                    <div class="d-grid gap-2">
                        <a class="btn btn-dark" href="@Url.Action("Login","Account")">Sign in</a>
                        <a class="btn btn-outline-dark" href="@Url.Action("Index","Products")">Continue shopping</a>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (Model == null || Model.Count == 0)
    {
        <div class="text-center py-5">
            <i class="bi bi-cart fs-1 text-muted"></i>
            <p class="text-muted">Your cart is empty</p>
            <a href="@Url.Action("Index", "Products")" class="btn btn-dark">Continue Shopping</a>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-8">
                @foreach (var item in Model)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-md-3">
                                    <div class="bg-light d-flex align-items-center justify-content-center" style="height: 100px;">
                                        @if(!string.IsNullOrEmpty(item.ImageUrl)){
                                            <img src="@item.ImageUrl" style="max-height:80px;" alt="@item.ProductName" />
                                        } else {
                                            <i class="bi bi-image fs-1 text-secondary"></i>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-5">
                                    <h5>@item.ProductName</h5>
                                    <div class="small text-muted mb-1">$@item.Price</div>
                                    <div class="small text-muted">Size: @item.Size @if(!string.IsNullOrEmpty(item.Color)){ <span>• Color: @item.Color</span> }</div>
                                </div>
                                <div class="col-md-2">
                                    <input type="number" class="form-control" value="@item.Quantity" min="1"
                                           data-product-id="@item.ProductId" data-size="@item.Size" data-color="@item.Color"
                                           onchange="updateQuantityElem(this)">
                                </div>
                                <div class="col-md-2 text-end">
                                    <p class="fw-bold mb-0">$@(item.Price * item.Quantity)</p>
                                    <button class="btn btn-sm btn-outline-danger" onclick="removeItemElem(this)" data-product-id="@item.ProductId" data-size="@item.Size" data-color="@item.Color">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="mb-3">Order Summary</h5>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal</span>
                            <span>$@Model.Sum(x => x.Price * x.Quantity)</span>
                        </div>
                        <div class="d-flex justify-content-between mb-3">
                            <span>Tax</span>
                            <span>$0</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-3 fw-bold">
                            <span>Total</span>
                            <span>$@Model.Sum(x => x.Price * x.Quantity)</span>
                        </div>
                        <button id="checkoutBtn" class="btn btn-dark w-100">Checkout</button>
                        <a href="@Url.Action("Index", "Products")" class="btn btn-outline-dark w-100 mt-2">Continue Shopping</a>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Checkout modal re-uses order-modal styles already in nike-style.css -->
<div id="checkoutModal" class="order-modal" aria-hidden="true">
  <div class="overlay" aria-hidden="true"></div>
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="checkoutModalTitle">
    <button type="button" class="order-modal-close" aria-label="Close">&times;</button>
    <div class="order-modal-body">
      <h5 id="checkoutModalTitle" class="mb-3">Checkout</h5>
      <div class="row">
        <div class="col-md-6">
          <div class="mb-2">
            <label for="checkoutName">Full name</label>
            <input id="checkoutName" class="form-control" type="text" />
          </div>
          <div class="mb-2">
            <label for="checkoutAddress">Address</label>
            <input id="checkoutAddress" class="form-control" type="text" />
          </div>
          <div class="mb-2">
            <label for="checkoutEmail">Email</label>
            <input id="checkoutEmail" class="form-control" type="email" />
          </div>
          <div class="mb-2">
            <label for="checkoutPhone">Phone</label>
            <input id="checkoutPhone" class="form-control" type="tel" />
          </div>
        </div>
        <div class="col-md-6">
          <h6 class="mb-2">Your items</h6>
          <div id="checkoutItemsList" style="max-height:280px;overflow:auto;padding-right:6px;"></div>
        </div>
      </div>
      <div class="mt-2">
        <label class="form-label">Payment method</label>
        <div class="d-flex gap-3 align-items-center">
          <div><input type="radio" name="paymentMethod" id="pmTransfer" value="transfer" checked/> <label for="pmTransfer">Bank transfer / QR</label></div>
          <div><input type="radio" name="paymentMethod" id="pmCod" value="cod"/> <label for="pmCod">Cash on delivery</label></div>
        </div>
      </div>
      <div class="mt-3">
        <button id="confirmOrderBtn" class="add-to-cart-btn">Confirm order</button>
      </div>
    </div>
  </div>
</div>

<!-- Payment success modal (English) -->
<div id="paymentSuccessModal" class="order-modal" aria-hidden="true">
  <div class="overlay" aria-hidden="true"></div>
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="paymentSuccessTitle">
    <button type="button" class="order-modal-close" aria-label="Close">&times;</button>
    <div class="order-modal-body text-center">
      <h5 id="paymentSuccessTitle" class="mb-3">Payment successful</h5>
      <p>Your order (ID: <span id="successOrderId"></span>) has been placed. It will be delivered within 2-4 business days.</p>
      <div class="mt-3 d-flex gap-2 justify-content-center">
         <a id="continueShopBtn" href="@Url.Action("Index","Products")" class="btn btn-dark">Continue shopping</a>
         <button id="closeSuccessBtn" class="btn btn-outline-dark">Close</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <script>
        (function(){
            // embed server cart data for client-side review
            const cartData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model ?? new List<BTL_WEBDEV2025.Models.ShoppingCartItem>()));

            window.updateQuantityElem = function updateQuantityElem(el){
                const productId = el.dataset.productId;
                const size = el.dataset.size || '';
                const color = el.dataset.color || '';
                const quantity = parseInt(el.value||'1',10) || 1;
                $.ajax({
                    url: '/Cart/UpdateCart',
                    type: 'POST',
                    data: {
                        productId: productId,
                        size: size,
                        color: color,
                        quantity: quantity
                    },
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        }
                    }
                });
            }

            window.removeItemElem = function removeItemElem(el){
                if (!confirm('Are you sure you want to remove this item?')) return;
                const productId = el.dataset.productId;
                const size = el.dataset.size || '';
                const color = el.dataset.color || '';
                $.ajax({
                    url: '/Cart/RemoveFromCart',
                    type: 'POST',
                    data: { productId: productId, size: size, color: color },
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        }
                    }
                });
            }

            const modal = document.getElementById('checkoutModal');
            if(!modal) { console.warn('checkoutModal not found'); return; }
            const overlay = modal.querySelector('.overlay');
            const closeBtn = modal.querySelector('.order-modal-close');
            const itemsList = document.getElementById('checkoutItemsList');
            const confirmBtn = document.getElementById('confirmOrderBtn');

            function showModal(){ modal.classList.add('show'); modal.setAttribute('aria-hidden','false'); document.body.style.overflow='hidden'; }
            function hideModal(){ modal.classList.remove('show'); modal.setAttribute('aria-hidden','true'); document.body.style.overflow=''; }

            function renderItems(){
                itemsList.innerHTML = '';
                if(!Array.isArray(cartData) || cartData.length===0){ itemsList.innerHTML = '<div class="text-muted">No items</div>'; return; }
                // normalize property names coming from server (PascalCase) to JS-friendly (camelCase)
                const normalized = cartData.map(i => ({
                    productName: i.productName ?? i.ProductName ?? '',
                    imageUrl: i.imageUrl ?? i.ImageUrl ?? '',
                    price: Number(i.price ?? i.Price ?? 0),
                    quantity: Number(i.quantity ?? i.Quantity ?? 1),
                    size: i.size ?? i.Size ?? '',
                    color: i.color ?? i.Color ?? ''
                }));

                normalized.forEach(i=>{
                    const div = document.createElement('div');
                    div.style.display='flex'; div.style.gap='10px'; div.style.alignItems='center'; div.style.padding='8px 0'; div.style.borderBottom='1px solid #eee';
                    const imgWrap = document.createElement('div'); imgWrap.style.width='56px'; imgWrap.style.height='56px'; imgWrap.style.flex='0 0 56px';
                    if(i.imageUrl){ const im=document.createElement('img'); im.src=i.imageUrl; im.style.maxWidth='56px'; im.style.maxHeight='56px'; im.style.objectFit='contain'; imgWrap.appendChild(im); }
                    else { imgWrap.innerHTML='<i class="bi bi-image text-secondary" style="font-size:24px"></i>'; }
                    const meta = document.createElement('div'); meta.style.flex='1'; meta.innerHTML = `<div style="font-weight:600">${i.productName}</div><div style="font-size:0.9rem;color:#666">Qty: ${i.quantity} • Size: ${i.size} • ${i.color?('Color: '+i.color):''} • $${(i.price).toFixed(2)}</div>`;
                    div.appendChild(imgWrap); div.appendChild(meta);
                    itemsList.appendChild(div);
                });
            }

            // Use event delegation so clicks are captured even if button is re-rendered
            document.addEventListener('click', function(e){
                const btn = e.target.closest('#checkoutBtn');
                if(!btn) return;
                e.preventDefault();
                console.debug('checkout button clicked');
                // require login client-side
                if(typeof window.isAuthenticated !== 'undefined' && (window.isAuthenticated === false || window.isAuthenticated === 'false')){
                    const toast = document.createElement('div');
                    toast.textContent = 'Please sign in to proceed to checkout';
                    toast.style.cssText = 'position:fixed;right:20px;bottom:20px;background:#ef4a64;color:#fff;padding:10px 14px;border-radius:8px;z-index:99999;box-shadow:0 8px 20px rgba(0,0,0,0.2);';
                    document.body.appendChild(toast);
                    setTimeout(()=>{ toast.remove(); window.location.href = '/Account/Login'; },1200);
                    return;
                }
                renderItems();
                showModal();
            });

            overlay.addEventListener('click', hideModal);
            closeBtn.addEventListener('click', hideModal);
            document.addEventListener('keydown', function(e){ if(e.key==='Escape' && modal.classList.contains('show')) hideModal(); });

            confirmBtn.addEventListener('click', async function(){
                const name = document.getElementById('checkoutName').value.trim();
                const address = document.getElementById('checkoutAddress').value.trim();
                const email = document.getElementById('checkoutEmail').value.trim();
                const phone = document.getElementById('checkoutPhone').value.trim();
                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;
                if(!name || !address || !email || !phone){ alert('Please fill all fields'); return; }

                try{
                    const form = new URLSearchParams();
                    form.append('fullName', name);
                    form.append('address', address);
                    form.append('email', email);
                    form.append('phone', phone);
                    form.append('paymentMethod', paymentMethod);

                    const res = await fetch('/Cart/Checkout', { method: 'POST', headers: { 'Content-Type':'application/x-www-form-urlencoded' }, body: form.toString() });
                    if(!res.ok) throw new Error('Network error');
                    const j = await res.json();
                    if(j.needLogin){ alert('Please sign in to complete checkout'); window.location.href='/Account/Login'; return; }
                    if(j.success){
                        // show payment instructions if any
                        if(j.paymentInstructions){
                            itemsList.innerHTML = '<div class="mt-2 p-2" style="background:#fafafa;border:1px solid #eee;border-radius:8px">' + j.paymentInstructions + '</div>';
                        }
                        const toast = document.createElement('div');
                        toast.textContent = 'Order placed';
                        toast.style.cssText = 'position:fixed;right:20px;bottom:20px;background:#111;color:#fff;padding:10px 14px;border-radius:8px;z-index:99999;box-shadow:0 8px 20px rgba(0,0,0,0.2);';
                        document.body.appendChild(toast);

                        // If transfer was chosen, poll payment status until confirmed
                        if(paymentMethod === 'transfer' && j.orderId){
                            const orderId = j.orderId;
                            const poll = setInterval(async () => {
                                try{
                                    const r = await fetch('/Cart/CheckPaymentStatus?orderId=' + encodeURIComponent(orderId), { credentials: 'same-origin' });
                                    if(r.ok){ const s = await r.json(); if(s.paid){
                                        clearInterval(poll);
                                        toast.textContent = 'Payment confirmed';
                                        // Clear server-side cart for this session
                                        try {
                                            await fetch('/Cart/ClearCart', { method: 'POST', credentials: 'same-origin' });
                                        } catch(e) { console.error('ClearCart failed', e); }

                                        // Update client UI: empty cart section and summary
                                        const mainContainer = document.querySelector('.container-fluid.px-4.my-4');
                                        if(mainContainer){
                                            const leftCol = mainContainer.querySelector('.row .col-md-8');
                                            const rightCol = mainContainer.querySelector('.row .col-md-4');
                                            if(leftCol) leftCol.innerHTML = '<div class="text-center py-5"><i class="bi bi-cart fs-1 text-muted"></i><p class="text-muted">Your cart is empty</p><a href="' + '@Url.Action("Index","Products")' + '" class="btn btn-dark">Continue Shopping</a></div>';
                                            if(rightCol) rightCol.innerHTML = '<div class="card"><div class="card-body"><h5 class="mb-3">Order Summary</h5><div class="d-flex justify-content-between mb-2"><span>Subtotal</span><span>$0</span></div><div class="d-flex justify-content-between mb-3"><span>Tax</span><span>$0</span></div><hr><div class="d-flex justify-content-between mb-3 fw-bold"><span>Total</span><span>$0</span></div><a href="' + '@Url.Action("Index","Products")' + '" class="btn btn-dark w-100">Continue Shopping</a></div></div>';
                                        }

                                        // Update header cart badge
                                        const badge = document.getElementById('cartBadge');
                                        if(badge){ badge.textContent = '0'; badge.style.display = 'none'; }

                                        // Show payment success modal with orderId
                                        try {
                                            showPaymentSuccessModal(orderId);
                                        } catch(e){ console.error('showPaymentSuccessModal failed', e); }

                                        // remove toast after a short delay
                                        setTimeout(()=>{ toast.remove(); },1500);
                                    } }
                                }catch(e){ console.error(e); }
                            }, 2000);
                        } else {
                            setTimeout(()=>{ toast.remove(); location.reload(); },1200);
                        }
                     } else {
                         alert(j.message || 'Failed to place order');
                     }
                }catch(e){ console.error(e); alert('Error placing order'); }
            });

            // Payment success modal helpers
            const successModal = document.getElementById('paymentSuccessModal');
            if(successModal){
                const successOverlay = successModal.querySelector('.overlay');
                const successClose = successModal.querySelector('.order-modal-close');
                const successOrderIdEl = document.getElementById('successOrderId');
                const successCloseBtn = document.getElementById('closeSuccessBtn');
                function showPaymentSuccessModal(orderId){
                    if(successOrderIdEl) successOrderIdEl.textContent = orderId || '';
                    successModal.classList.add('show'); successModal.setAttribute('aria-hidden','false'); document.body.style.overflow='hidden';
                }
                function hidePaymentSuccessModal(){ successModal.classList.remove('show'); successModal.setAttribute('aria-hidden','true'); document.body.style.overflow=''; }
                successOverlay.addEventListener('click', hidePaymentSuccessModal);
                successClose.addEventListener('click', hidePaymentSuccessModal);
                successCloseBtn.addEventListener('click', hidePaymentSuccessModal);
            }

        })();
    </script>
}

